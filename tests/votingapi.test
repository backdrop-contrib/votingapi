<?php

/**
 * @file
 * Test file for VotingAPI module.
 */

class VotingAPITestCase extends BackdropWebTestCase {

  private $node;
  private $nid;

  function setUp() {
    parent::setUp('votingapi');
    // Create a new page
    $this->nid = '9999';
    $this->node = $this->backdropCreateNode(array(
      'type' => 'page',
    ));
    $this->node->title = '';
    $this->node->teaser = t('Teaser text');
    $this->node->uid = 1;
    $this->node->status = 1;
    $this->node->promote = 0;
    $this->node->title = t('Node @id', array('@id' => $this->nid));
    $this->node->save();
  }

  /**
   * Ensure that the optional fields are truly optional.
   */
  function testMinimalAdd() {
    $value = '85';
    // The minimum required fields according to the documentation are
    // entity_id and value.
    $vote = array(
      'entity_id' => $this->nid,
      'value' => $value,
    );
    try {
      $result = votingapi_add_votes($vote);
      // Test that the result has its fields set appropriately.
      $this->validateVote('testMinimalAdd()', $result, $this->nid, array($value));
      $this->assertTrue(REQUEST_TIME - $result[0]['timestamp'] < 2, t('The timestamp should be less than 2 seconds ago.'));
    } catch (Exception $e) {
      $this->fail(t('Could not add a vote with only entity_id and value.'));
      return;
    }
  }

  /**
   * Add a vote and ensure that the vote was stored properly.
   */
  function testAddVote() {
    global $user;
    $value = '7';
    $vote = array(
      'entity_id' => $this->nid,
      'value' => $value,
      'entity_type' => 'node',
    );
    try {
      $result = votingapi_add_votes($vote);
      // Test that the result has its fields set appropriately.
      $this->validateVote("testAddVote()", $result, $this->nid, $value, 'node', $user->uid);
      $this->assertTrue(REQUEST_TIME - $result[0]['timestamp'] < 2, t('The timestamp should be less than 2 seconds ago.'));
    } catch (Exception $e) {
      $this->fail('The votingapi_add_votes threw an error during the "votingapi_add_votes" call.');
      return;
    }
    // Load the vote back in and verify it matches.
    $vote_results = votingapi_recalculate_results('node', $this->nid);
    $this->validateVoteCounts('testAddVote()', $vote_results, $this->nid, array($value));
  }

  /**
   * Add multiple votes and ensure that the vote calculations are working.
   */
  function testAddMultipleVotes() {
    $users = array();
    $users[] = $this->backdropCreateUser();
    $users[] = $this->backdropCreateUser();
    $users[] = $this->backdropCreateUser();
    $values = array(72, 13, 27);
    $votes = array();
    try {
      for ($index = 0; $index < count($values); $index++) {
        $votes[$index] = array();
        $votes[$index]['entity_type'] = 'node';
        $votes[$index]['entity_id'] = $this->nid;
        $votes[$index]['uid'] = $users[$index]->uid;
        $votes[$index]['value'] = $values[$index];
      }
      $result = votingapi_add_votes($votes);
      // Test that the result has its fields set appropriately.
      $this->validateVote("testAddMultipleVotes()", $result, $this->nid, $values);
    }
    catch (Exception $e) {
      $this->fail('The votingapi_add_votes threw an error during the "votingapi_add_votes" call.');
      return;
    }
    // Load the vote back in and verify it matches.
    $vote_results = votingapi_recalculate_results('node', $this->nid);
    $this->validateVoteCounts('testAddVote()', $vote_results, $this->nid, $values);
  }

  function validateVote($prefix, $vote, $entity_id, $value, $entity_type = 'node',
                        $uid = NULL, $value_type = 'percent', $tag = 'vote', $vote_source = NULL) {
    global $user;
    if ($vote_source == NULL) {
      $vote_source = hash('sha256', serialize(ip_address()));
    }
    $prefix_array = array('@prefix' => $prefix);
    for ($index = 0; $index < count($vote); $index++) {
      $this->assertTrue($vote[$index]['entity_id'] == $entity_id, t('@prefix: entity_id should match.', $prefix_array));
      $this->assertTrue($vote[$index]['value'] == $value[$index], t('@prefix: value should match.', $prefix_array));
      $this->assertTrue($vote[$index]['entity_type'] == $entity_type, t('@prefix: entity_type should match, default = "node".', $prefix_array));
      $this->assertTrue($vote[$index]['value_type'] == $value_type, t('@prefix: value_type should match, default= "percent".', $prefix_array));
      $this->assertTrue($vote[$index]['tag'] == $tag, t('@prefix: tag should match, default =  "vote".', $prefix_array));
      $this->assertTrue($vote[$index]['vote_source'] == $vote_source, t('@prefix: vote_source should match, default = ip address hash.', $prefix_array));
      if ($uid != NULL) {
        $this->assertTrue($vote[0]['uid'] == $uid, t('@prefix: uid should match.', $prefix_array));
      }
    }
  }

  function validateVoteCounts($prefix, $votes, $entity_id, $values, $entity_type = 'node',
    $value_type = 'percent', $tag = 'vote') {
      $count = 0.0;
      $sum = 0.0;
      foreach ($values as $value) {
        $sum += $value;
        $count++;
      }
      $this->assertTrue($summary['entity_type'] == $entity_type,
        t('@prefix: (@summary_desc) entity_type should match, default = "node"', $prefix_array));
      $this->assertTrue($summary['entity_id'] == $entity_id,
        t('@prefix: (@summary_desc) entity_id should match', $prefix_array));
      $this->assertTrue($summary['value_type'] == $value_type,
        t('@prefix: (@summary_desc) value_type should match.', $prefix_array));
      $this->assertTrue($summary['tag'] == $tag,
        t('@prefix: (@summary_desc) tag should match', $prefix_array));
    }
  }
}
